plugins {
    id 'maven-publish'
    id 'eclipse'
    id 'idea'
    id 'org.ajoberstar.grgit.service' version '5.2.2'
    id 'net.neoforged.gradle' version '[6.0.18,6.2)'
    id 'io.freefair.lombok' version '8.6'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
    id 'org.spongepowered.mixin' version '0.7.+'
}

tasks.named('wrapper', Wrapper).configure {
    //Define wrapper values here so as to not have to always do so when updating gradlew.properties
    gradleVersion = '8.1.1'
}

project.ext.gitHash = grgitService.service.get().grgit.log().find().abbreviatedId

boolean dev = System.getenv('RELEASE') == null || System.getenv('RELEASE') == 'false'

ext.buildnumber = 0
project.buildnumber = System.getenv('BUILD_NUMBER') != null ? System.getenv('BUILD_NUMBER') : project.ext.gitHash

version = "${minecraft_version}-${mod_version}+" + project.buildnumber
group = "team.chisel.ctm" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
project.base.archivesName = dev ? "CTM_DEV" : "CTM"
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

mixin {
    config "ctm.mixins.json"
}

minecraft {
    mappings channel: mapping_channel, version: mapping_version

    copyIdeResources = true

    accessTransformers {
        file(file('src/main/resources/META-INF/accesstransformer.cfg'))
    }

    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file("runs/${it.name}")

            property 'ctm.iside', 'true'
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            property 'forge.logging.console.level', 'debug'

            mods {
                ctm {
                    source sourceSets.main
                    source sourceSets.test
                }
            }
        }

        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', 'ctm'
        }

        server {
            property 'forge.enabledGameTestNamespaces', 'ctm'
            args '--nogui'
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', 'ctm'
        }

        data {
            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'ctm', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

processResources {
    exclude '.cache/'
}

compileJava.options.encoding = 'UTF-8'
javadoc.options.encoding = 'UTF-8'

jar {
    manifest {
        attributes(['Specification-Title': 'ctm',
                    'Specification-Vendor': 'chisel-team',
                    'Specification-Version': '25.0',
                    'Implementation-Title': project.name,
                    'Implementation-Version': "${version}",
                    'Implementation-Vendor' : 'chisel-team',
                    'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
        ])
    }
}

repositories {
    // mavenLocal()
    maven {
        name = 'sponge'
        url = 'https://repo.spongepowered.org/repository/maven-public/'
        content {
            includeGroup "org.spongepowered"
        }
    }
}

dependencies {
    minecraft 'net.neoforged:forge:' + minecraft_version + '-' + forge_version
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    annotationProcessor 'org.spongepowered:mixin:0.8.5-SNAPSHOT:processor'
}

test {
    useJUnitPlatform()
    maxHeapSize = '1G'
    testLogging {
        events "passed"
    }
}

lombok {
    version = "1.18.32"
}

// Create API jar with sources and compiled files
tasks.register('apiJar', Jar) {
    duplicatesStrategy(DuplicatesStrategy.FAIL)
    archiveClassifier.set('api')
    from sourceSets.main.allSource
    from sourceSets.main.output
    include 'team/chisel/ctm/api/**/*'
}

publishing {
    tasks.publish.dependsOn 'build'
    publications { PublicationContainer publicationContainer ->
        publicationContainer.register('mavenJava', MavenPublication) { MavenPublication publication ->
            publication.artifactId = 'CTM'
            publication.artifacts = [jar, apiJar]
            //artifact sourceJar
        }
    }

    repositories {
        if (project.hasProperty('mavendir')) {
            maven { url project.property('mavendir') }
        }
    }
}

String getChangelogText() {
    def changelogFile = file('changelog.txt')
    String str = ''
    int lineCount = 0
    boolean done = false
    changelogFile.eachLine {
        if (done || it == null) {
            return
        }
        if (it.size() > 1) {
            def temp = it
            if (lineCount == 0) {
                temp = "CTM ${version}"
                temp = "<h2>$temp</h2>"
            } else if (it.startsWith('-')) {
                temp = "&nbsp;&nbsp;&nbsp;$temp"
                temp = temp.replaceAll("(\\S+\\/\\S+)#([0-9]+)\\b", "<a href=\"https://github.com/\$1/issues/\$2\">\$0</a>")
                temp = temp.replaceAll("#([0-9]+)\\b(?!<\\/a>)", "<a href=\"https://github.com/$github_project/issues/\$1\">\$0</a>")
            } else {
                temp = "<h4>$temp</h4>"
            }
            str += "$temp<br/>"
            lineCount++
            return
        } else {
            done = true
        }
    }
    return str
}

tasks.curseforge.enabled = !dev && project.hasProperty('curseforge_key')

curseforge {
    if (project.hasProperty('curseforge_key')) {
        apiKey = project.property('curseforge_key')
    }

    project {
        id = project.projectId
        changelog = System.getenv('CHANGELOG') == null || System.getenv('CHANGELOG') == 'none' ? getChangelogText() : System.getenv('CHANGELOG')
        changelogType = 'html'
        releaseType = project.curse_type
        mainArtifact(jar) {
            displayName = "CTM - ${version}"
        }
        addGameVersion project.minecraft_version
    }
}
